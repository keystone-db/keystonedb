name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x86_64 (GNU)
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            archive: tar.gz
            use_cross: false

          # Linux x86_64 (MUSL - static binary)
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            archive: tar.gz
            use_cross: true

          # Linux ARM64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            archive: tar.gz
            use_cross: true

          # macOS x86_64 (Intel)
          - os: macos-latest
            target: x86_64-apple-darwin
            archive: tar.gz
            use_cross: false

          # macOS ARM64 (Apple Silicon)
          - os: macos-latest
            target: aarch64-apple-darwin
            archive: tar.gz
            use_cross: false

          # Windows x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            archive: zip
            use_cross: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install protobuf compiler
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            sudo apt-get update
            sudo apt-get install -y protobuf-compiler
          elif [ "$RUNNER_OS" == "macOS" ]; then
            brew install protobuf
          elif [ "$RUNNER_OS" == "Windows" ]; then
            choco install protoc
          fi
        shell: bash

      - name: Install cross
        if: matrix.use_cross
        run: cargo install cross --git https://github.com/cross-rs/cross

      - name: Setup cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      - name: Build binaries
        run: |
          if [ "${{ matrix.use_cross }}" = "true" ]; then
            cross build --release --target ${{ matrix.target }} --bin kstone
            cross build --release --target ${{ matrix.target }} --bin kstone-server
          else
            cargo build --release --target ${{ matrix.target }} --bin kstone
            cargo build --release --target ${{ matrix.target }} --bin kstone-server
          fi
        shell: bash

      - name: Package binaries (Unix)
        if: matrix.archive == 'tar.gz'
        run: |
          cd target/${{ matrix.target }}/release
          tar czf kstone-${{ matrix.target }}.tar.gz kstone
          tar czf kstone-server-${{ matrix.target }}.tar.gz kstone-server
          shasum -a 256 kstone-${{ matrix.target }}.tar.gz > kstone-${{ matrix.target }}.tar.gz.sha256
          shasum -a 256 kstone-server-${{ matrix.target }}.tar.gz > kstone-server-${{ matrix.target }}.tar.gz.sha256

      - name: Package binaries (Windows)
        if: matrix.archive == 'zip'
        run: |
          cd target/${{ matrix.target }}/release
          7z a kstone-${{ matrix.target }}.zip kstone.exe
          7z a kstone-server-${{ matrix.target }}.zip kstone-server.exe
          (Get-FileHash kstone-${{ matrix.target }}.zip -Algorithm SHA256).Hash | Out-File -Encoding ASCII kstone-${{ matrix.target }}.zip.sha256
          (Get-FileHash kstone-server-${{ matrix.target }}.zip -Algorithm SHA256).Hash | Out-File -Encoding ASCII kstone-server-${{ matrix.target }}.zip.sha256
        shell: pwsh

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: |
            target/${{ matrix.target }}/release/kstone-${{ matrix.target }}.${{ matrix.archive }}
            target/${{ matrix.target }}/release/kstone-${{ matrix.target }}.${{ matrix.archive }}.sha256
            target/${{ matrix.target }}/release/kstone-server-${{ matrix.target }}.${{ matrix.archive }}
            target/${{ matrix.target }}/release/kstone-server-${{ matrix.target }}.${{ matrix.archive }}.sha256
          if-no-files-found: error

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release files
        run: |
          mkdir -p release
          find artifacts -type f \( -name "*.tar.gz" -o -name "*.zip" -o -name "*.sha256" \) -exec mv {} release/ \;

      - name: Generate release notes
        id: notes
        run: |
          VERSION=${GITHUB_REF#refs/tags/}

          cat > release_notes.md << 'EOF'
          # KeystoneDB $VERSION

          ## Installation

          ### Homebrew (macOS/Linux)
          ```bash
          brew tap keystone-db/keystonedb
          brew install kstone
          brew install kstone-server
          ```

          ### Direct Download
          Download the appropriate archive for your platform from the assets below.

          ### Docker
          ```bash
          # CLI
          docker pull parkerdgabel/kstone:$VERSION

          # Server
          docker pull parkerdgabel/kstone-server:$VERSION
          ```

          ## Platforms

          - **Linux x86_64** (GNU and MUSL)
          - **Linux ARM64** (aarch64)
          - **macOS Intel** (x86_64)
          - **macOS Apple Silicon** (ARM64)
          - **Windows** (x86_64)

          ## What's Included

          - `kstone` - Command-line interface for local database access
          - `kstone-server` - gRPC server for remote database access

          ## Checksums

          SHA256 checksums are provided for all binaries (`.sha256` files).

          Verify downloads with:
          ```bash
          shasum -a 256 -c kstone-*.sha256
          ```

          ## Documentation

          - [README](https://github.com/keystone-db/keystonedb)
          - [User Guide](https://github.com/keystone-db/keystonedb/blob/main/book/README.md)
          - [Deployment Guide](https://github.com/keystone-db/keystonedb/blob/main/DEPLOYMENT.md)

          EOF

          sed -i "s/\$VERSION/${VERSION}/g" release_notes.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: release/*
          body_path: release_notes.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-crates:
    name: Publish to crates.io
    needs: release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup cache
        uses: Swatinem/rust-cache@v2

      - name: Publish to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          # Publish in dependency order with retries
          publish_with_retry() {
            local crate=$1
            local max_attempts=3
            local attempt=1

            while [ $attempt -le $max_attempts ]; do
              echo "Publishing $crate (attempt $attempt/$max_attempts)..."

              if cargo publish -p "$crate"; then
                echo "✓ Successfully published $crate"
                return 0
              fi

              if [ $attempt -lt $max_attempts ]; then
                echo "Failed to publish $crate, retrying in 30s..."
                sleep 30
              fi

              attempt=$((attempt + 1))
            done

            echo "✗ Failed to publish $crate after $max_attempts attempts"
            return 1
          }

          # Publish in order
          publish_with_retry "kstone-core" && sleep 30
          publish_with_retry "kstone-proto" && sleep 30
          publish_with_retry "kstone-api" && sleep 30
          publish_with_retry "kstone-client"

  docker:
    name: Build and Push Docker Images
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        continue-on-error: true

      - name: Extract version
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Build and push CLI image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ secrets.DOCKERHUB_USERNAME != '' }}
          tags: |
            parkerdgabel/kstone:latest
            parkerdgabel/kstone:${{ steps.version.outputs.VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push server image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.server
          platforms: linux/amd64,linux/arm64
          push: ${{ secrets.DOCKERHUB_USERNAME != '' }}
          tags: |
            parkerdgabel/kstone-server:latest
            parkerdgabel/kstone-server:${{ steps.version.outputs.VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
