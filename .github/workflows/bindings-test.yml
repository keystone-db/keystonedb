name: Test Language Bindings

on:
  pull_request:
    paths:
      - 'bindings/**'
      - 'c-ffi/**'
      - 'kstone-proto/**'
      - '.github/workflows/bindings-test.yml'
  push:
    branches:
      - main
    paths:
      - 'bindings/**'
      - 'c-ffi/**'
      - 'kstone-proto/**'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test-go-embedded:
    name: Test Go Embedded Bindings (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.os }}-ffi

      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Build C FFI library
        run: cargo build --release -p kstone-ffi

      - name: Run Go embedded tests (Linux)
        if: runner.os == 'Linux'
        run: |
          export CGO_ENABLED=1
          export CGO_LDFLAGS="-L$(pwd)/target/release -lkstone_ffi"
          export CGO_CFLAGS="-I$(pwd)/c-ffi/include"
          export LD_LIBRARY_PATH="$(pwd)/target/release"
          cd bindings/go/embedded
          go test -v

      - name: Run Go embedded tests (macOS)
        if: runner.os == 'macOS'
        run: |
          export CGO_ENABLED=1
          export CGO_LDFLAGS="-L$(pwd)/target/release -lkstone_ffi"
          export CGO_CFLAGS="-I$(pwd)/c-ffi/include"
          export DYLD_LIBRARY_PATH="$(pwd)/target/release"
          cd bindings/go/embedded
          go test -v

  test-python-embedded:
    name: Test Python Embedded Bindings (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.9', '3.12']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.os }}-python-${{ matrix.python-version }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install maturin
        run: pip install maturin pytest

      - name: Build Python wheel
        run: |
          cd bindings/python/embedded
          maturin build --release

      - name: Install and test wheel (Unix)
        if: runner.os != 'Windows'
        run: |
          pip install bindings/python/embedded/target/wheels/keystonedb-*.whl
          pytest bindings/python/embedded/test_smoke.py -v

      - name: Install and test wheel (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $wheel = Get-ChildItem -Path bindings/python/embedded/target/wheels -Filter keystonedb-*.whl | Select-Object -First 1
          pip install $wheel.FullName
          pytest bindings/python/embedded/test_smoke.py -v

  test-grpc-clients:
    name: Test gRPC Clients
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install protobuf compiler
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Build KeystoneDB server
        run: cargo build --release --bin kstone-server

      - name: Start KeystoneDB server
        run: |
          ./target/release/kstone-server --db-path /tmp/test-grpc.keystone --port 50051 &
          echo $! > server.pid
          # Wait for server to start
          sleep 5

      - name: Test Go gRPC client
        run: |
          cd bindings/go/client
          go build -v
          echo "✓ Go gRPC client builds successfully"

      - name: Test Python gRPC client
        run: |
          pip install grpcio grpcio-tools protobuf
          cd bindings/python/client
          # Generate protobuf if needed
          python -m grpc_tools.protoc \
            --python_out=keystonedb \
            --grpc_python_out=keystonedb \
            --proto_path=../../../kstone-proto/proto \
            ../../../kstone-proto/proto/keystone.proto
          echo "✓ Python gRPC client protobuf generated successfully"

      - name: Test JavaScript gRPC client
        run: |
          cd bindings/javascript/client
          npm install
          npm run build
          echo "✓ JavaScript gRPC client builds successfully"

      - name: Stop KeystoneDB server
        if: always()
        run: |
          if [ -f server.pid ]; then
            kill $(cat server.pid) || true
            rm server.pid
          fi

  test-c-ffi:
    name: Test C FFI Library (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.os }}-c-ffi

      - name: Build C FFI library
        run: cargo build --release -p kstone-ffi

      - name: Verify C header generated
        run: |
          if [ ! -f c-ffi/include/keystone.h ]; then
            echo "Error: C header not generated"
            exit 1
          fi
          echo "✓ C header generated successfully"
        shell: bash

      - name: Check library artifacts (Unix)
        if: runner.os != 'Windows'
        run: |
          ls -lh target/release/libkstone_ffi.*
          echo "✓ C FFI library built successfully"

      - name: Check library artifacts (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Get-ChildItem -Path target/release -Filter *kstone_ffi*
          Write-Host "✓ C FFI library built successfully"

  summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test-go-embedded, test-python-embedded, test-grpc-clients, test-c-ffi]
    if: always()

    steps:
      - name: Check test results
        run: |
          echo "Test Results Summary:"
          echo "===================="
          echo "Go Embedded: ${{ needs.test-go-embedded.result }}"
          echo "Python Embedded: ${{ needs.test-python-embedded.result }}"
          echo "gRPC Clients: ${{ needs.test-grpc-clients.result }}"
          echo "C FFI Library: ${{ needs.test-c-ffi.result }}"

          if [ "${{ needs.test-go-embedded.result }}" != "success" ] || \
             [ "${{ needs.test-python-embedded.result }}" != "success" ] || \
             [ "${{ needs.test-grpc-clients.result }}" != "success" ] || \
             [ "${{ needs.test-c-ffi.result }}" != "success" ]; then
            echo "❌ Some tests failed"
            exit 1
          fi

          echo "✅ All tests passed!"
